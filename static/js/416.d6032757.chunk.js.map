{"version":3,"file":"static/js/416.d6032757.chunk.js","mappings":"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","sources":["components/button/button.component.tsx","components/button/button.styles.ts","components/form-input/form-input.styles.ts","components/form-input/form-input.component.tsx","components/sign-up-form/sign-up-form.component.jsx","components/sign-in-form/sign-in-form.component.jsx","routes/authentication/authentication.component.jsx"],"sourcesContent":["import { FC, ReactNode, ButtonHTMLAttributes } from 'react';\n\nimport {\n  BaseButton,\n  GoogleSignInButton,\n  InvertedButton,\n} from './button.styles';\n\nexport enum BUTTON_TYPE_CLASSES {\n  base = 'base',\n  google = 'google-sign-in',\n  inverted = 'inverted',\n};\n\ntype ButtonComponent = typeof BaseButton | typeof GoogleSignInButton | typeof InvertedButton;\n\nconst getButton = (buttonType = BUTTON_TYPE_CLASSES.base): ButtonComponent =>\n  ({\n    [BUTTON_TYPE_CLASSES.base]: BaseButton,\n    [BUTTON_TYPE_CLASSES.google]: GoogleSignInButton,\n    [BUTTON_TYPE_CLASSES.inverted]: InvertedButton,\n  }[buttonType]);\n\n  export type ButtonProps = {\n    buttonType?: BUTTON_TYPE_CLASSES;\n    children?: ReactNode;\n  } & ButtonHTMLAttributes<HTMLButtonElement>;\n\n\nconst Button: FC<ButtonProps> = ({ children, buttonType, ...otherProps }) => {\n  const CustomButton = getButton(buttonType);\n  return <CustomButton {...otherProps}>{children}</CustomButton>;\n};\n\nexport default Button;\n","import styled from 'styled-components';\n\nexport const BaseButton = styled.button`\n  min-width: 165px;\n  width: auto;\n  height: 50px;\n  letter-spacing: 0.5px;\n  line-height: 50px;\n  padding: 0 35px 0 35px;\n  font-size: 15px;\n  background-color: black;\n  color: white;\n  text-transform: uppercase;\n  font-family: 'Open Sans';\n  font-weight: bold;\n  border: none;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n\n  &:hover {\n    background-color: white;\n    color: black;\n    border: 1px solid black;\n  }\n`;\n\nexport const GoogleSignInButton = styled(BaseButton)`\n  background-color: #4285f4;\n  color: white;\n\n  &:hover {\n    background-color: #357ae8;\n    border: none;\n  }\n`;\n\nexport const InvertedButton = styled(BaseButton)`\n  background-color: white;\n  color: black;\n  border: 1px solid black;\n\n  &:hover {\n    background-color: black;\n    color: white;\n    border: none;\n  }\n`;\n","import styled, { css } from 'styled-components';\n\nconst subColor = 'grey';\nconst mainColor = 'black';\n\nconst shrinkLabelStyles = css`\n  top: -14px;\n  font-size: 12px;\n  color: ${mainColor};\n`;\n\ntype FormInputLabelProps = {\n  shrink?: boolean;\n}\n\nexport const FormInputLabel = styled.label<FormInputLabelProps>`\n  color: ${subColor};\n  font-size: 16px;\n  font-weight: normal;\n  position: absolute;\n  pointer-events: none;\n  left: 5px;\n  top: 10px;\n  transition: 300ms ease all;\n  ${({ shrink }) => shrink && shrinkLabelStyles};\n`;\n\nexport const Input = styled.input`\n  background: none;\n  background-color: white;\n  color: ${subColor};\n  font-size: 18px;\n  padding: 10px 10px 10px 5px;\n  display: block;\n  width: 100%;\n  border: none;\n  border-radius: 0;\n  border-bottom: 1px solid ${subColor};\n  margin: 25px 0;\n\n  &:focus {\n    outline: none;\n  }\n\n  &:focus ~ ${FormInputLabel} {\n    ${shrinkLabelStyles};\n  }\n`;\n\nexport const Group = styled.div`\n  position: relative;\n  margin: 45px 0;\n\n  input[type='password'] {\n    letter-spacing: 0.3em;\n  }\n`;","import { FC, InputHTMLAttributes } from 'react';\nimport { FormInputLabel, Input, Group } from './form-input.styles';\n\ntype FormInputProps = { label: string } & InputHTMLAttributes<HTMLInputElement>;\n\nconst FormInput: FC<FormInputProps> = ({ label, ...otherProps }) => {\n  return (\n    <Group>\n      <Input {...otherProps} />\n      {label && (\n        <FormInputLabel\n          shrink={Boolean(\n            otherProps.value &&\n              typeof otherProps.value === 'string' &&\n              otherProps.value.length\n          )}\n        >\n          {label}\n        </FormInputLabel>\n      )}\n    </Group>\n  );\n};\n\nexport default FormInput;\n","import { useState } from 'react';\nimport {\n  createAuthUserWithEmailAndPassword,\n  createUserDocumentFromAuth,\n} from '../../utils/firebase/firebase.utils';\nimport FormInput from '../form-input/form-input.component';\nimport Button from '../button/button.component';\n\nimport './sign-up-form.styles.scss';\nconst defaultFormFields = {\n  displayName: '',\n  email: '',\n  password: '',\n  confirmPassword: '',\n};\n\nconst SignUpForm = () => {\n  const [formFields, setFormFields] = useState(defaultFormFields);\n  const { displayName, email, password, confirmPassword } = formFields;\n\n  const resetFormFields = () => {\n    setFormFields(defaultFormFields);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormFields({ ...formFields, [name]: value });\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    if (password !== confirmPassword) {\n      alert('passwords do not match!');\n      return;\n    }\n\n    try {\n      const { user } = await createAuthUserWithEmailAndPassword(\n        email,\n        password\n      );\n      await createUserDocumentFromAuth(user, { displayName });\n      resetFormFields();\n    } catch (error) {\n      if (error.code === 'auth/email-already-in-use') {\n        alert('Cannot create user, email already in use');\n      } else {\n        console.error('user creation encountered an error', error);\n      }\n    }\n  };\n\n  return (\n    <div className=\"sign-up-container\">\n      <h2>Don't have an account?</h2>\n      <span>Sing up with your email and password</span>\n      <form onSubmit={handleSubmit}>\n        <FormInput\n          label=\"Display Name\"\n          type=\"text\"\n          required\n          onChange={handleChange}\n          name=\"displayName\"\n          value={displayName}\n        />\n        <FormInput\n          label=\"Email\"\n          type=\"email\"\n          required\n          onChange={handleChange}\n          name=\"email\"\n          value={email}\n        />\n        <FormInput\n          label=\"Password\"\n          type=\"password\"\n          required\n          onChange={handleChange}\n          name=\"password\"\n          value={password}\n        />\n        <FormInput\n          label=\"Confirm Password\"\n          type=\"password\"\n          required\n          onChange={handleChange}\n          name=\"confirmPassword\"\n          value={confirmPassword}\n        />\n        <Button type=\"submit\">Sign Up</Button>\n      </form>\n    </div>\n  );\n};\n\nexport default SignUpForm;\n","import { useState } from 'react';\nimport {\n  signInWithGooglePopup,\n  signInAuthUserWithEmailAndPassword,\n} from '../../utils/firebase/firebase.utils';\nimport FormInput from '../form-input/form-input.component';\nimport Button, {BUTTON_TYPE_CLASSES} from '../button/button.component';\n\nimport './sign-in-form.styles.scss';\nconst defaultFormFields = {\n  email: '',\n  password: '',\n};\n\nconst SignInForm = () => {\n  const [formFields, setFormFields] = useState(defaultFormFields);\n  const { email, password } = formFields;\n\n  const resetFormFields = () => {\n    setFormFields(defaultFormFields);\n  };\n\n  const signInWithGoogle = async () => {\n    try {\n      await signInWithGooglePopup();\n    } catch (error) {\n      console.error('Failed to sign in:', error);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormFields({ ...formFields, [name]: value });\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { user } = await signInAuthUserWithEmailAndPassword(\n        email,\n        password\n      );\n      resetFormFields();\n    } catch (error) {\n      if (error.code === 'auth/invalid-login-credentials') {\n        alert('Invalid login credentials! Please try again.');\n      } else {\n        console.error('user sign in encountered an error', error);\n      }\n    }\n  };\n\n  return (\n    <div className=\"sign-up-container\">\n      <h2>Already have an account?</h2>\n      <span>Sing in with your email and password</span>\n      <form onSubmit={handleSubmit}>\n        <FormInput\n          label=\"Email\"\n          type=\"email\"\n          required\n          onChange={handleChange}\n          name=\"email\"\n          value={email}\n        />\n        <FormInput\n          label=\"Password\"\n          type=\"password\"\n          required\n          onChange={handleChange}\n          name=\"password\"\n          value={password}\n        />\n        <div className=\"buttons-container\">\n          <Button type=\"submit\">Sign In</Button>\n          <Button buttonType={BUTTON_TYPE_CLASSES.google} type=\"button\" onClick={signInWithGoogle}>\n            Sign in with Google\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default SignInForm;\n","import SignUpForm from '../../components/sign-up-form/sign-up-form.component';\nimport SignInForm from '../../components/sign-in-form/sign-in-form.component';\n\nimport './authentication.styles.scss';\n\nconst Authentication = () => {\n  return (\n    <div className='authentication-container'>\n      <SignInForm />\n      <SignUpForm />\n    </div>\n  );\n};\n\nexport default Authentication;\n"],"names":["BUTTON_TYPE_CLASSES","_ref","children","buttonType","otherProps","CustomButton","arguments","length","undefined","base","BaseButton","google","GoogleSignInButton","inverted","InvertedButton","getButton","_jsx","styled","button","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","subColor","shrinkLabelStyles","css","FormInputLabel","label","shrink","Input","input","Group","div","_templateObject4","_jsxs","Boolean","value","defaultFormFields","displayName","email","password","confirmPassword","SignUpForm","formFields","setFormFields","useState","handleChange","event","name","target","className","onSubmit","async","preventDefault","user","createAuthUserWithEmailAndPassword","createUserDocumentFromAuth","error","code","alert","console","FormInput","type","required","onChange","Button","SignInForm","signInAuthUserWithEmailAndPassword","onClick","signInWithGooglePopup","Authentication"],"sourceRoot":""}