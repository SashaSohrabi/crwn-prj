{"version":3,"file":"static/js/175.1963a89a.chunk.js","mappings":"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","sources":["components/button/button.component.tsx","components/button/button.styles.ts","store/categories/category.selector.ts","components/product-card/product-card.component.jsx","components/category-preview/category-preview.component.jsx","routes/categories-preview/categories-preview.component.jsx","routes/category/category.component.jsx","routes/shop/shop.component.jsx","store/categories/category.action.ts","store/cart/cart.action.ts","store/cart/cart.selector.ts"],"sourcesContent":["import { FC, ReactNode, ButtonHTMLAttributes } from 'react';\n\nimport {\n  BaseButton,\n  GoogleSignInButton,\n  InvertedButton,\n} from './button.styles';\n\nexport enum BUTTON_TYPE_CLASSES {\n  base = 'base',\n  google = 'google-sign-in',\n  inverted = 'inverted',\n};\n\ntype ButtonComponent = typeof BaseButton | typeof GoogleSignInButton | typeof InvertedButton;\n\nconst getButton = (buttonType = BUTTON_TYPE_CLASSES.base): ButtonComponent =>\n  ({\n    [BUTTON_TYPE_CLASSES.base]: BaseButton,\n    [BUTTON_TYPE_CLASSES.google]: GoogleSignInButton,\n    [BUTTON_TYPE_CLASSES.inverted]: InvertedButton,\n  }[buttonType]);\n\n  export type ButtonProps = {\n    buttonType?: BUTTON_TYPE_CLASSES;\n    children?: ReactNode;\n  } & ButtonHTMLAttributes<HTMLButtonElement>;\n\n\nconst Button: FC<ButtonProps> = ({ children, buttonType, ...otherProps }) => {\n  const CustomButton = getButton(buttonType);\n  return <CustomButton {...otherProps}>{children}</CustomButton>;\n};\n\nexport default Button;\n","import styled from 'styled-components';\n\nexport const BaseButton = styled.button`\n  min-width: 165px;\n  width: auto;\n  height: 50px;\n  letter-spacing: 0.5px;\n  line-height: 50px;\n  padding: 0 35px 0 35px;\n  font-size: 15px;\n  background-color: black;\n  color: white;\n  text-transform: uppercase;\n  font-family: 'Open Sans';\n  font-weight: bold;\n  border: none;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n\n  &:hover {\n    background-color: white;\n    color: black;\n    border: 1px solid black;\n  }\n`;\n\nexport const GoogleSignInButton = styled(BaseButton)`\n  background-color: #4285f4;\n  color: white;\n\n  &:hover {\n    background-color: #357ae8;\n    border: none;\n  }\n`;\n\nexport const InvertedButton = styled(BaseButton)`\n  background-color: white;\n  color: black;\n  border: 1px solid black;\n\n  &:hover {\n    background-color: black;\n    color: white;\n    border: none;\n  }\n`;\n","import { createSelector } from 'reselect';\nimport { Category, CategoryMap } from './category.types';\nimport { CategoriesState } from './category.reducer';\nimport { RootState } from '../store';\n\nconst selectCategoryReducer = (state: RootState): CategoriesState =>\n  state.categories;\n\nexport const selectCategories = createSelector(\n  [selectCategoryReducer],\n  (categoriesSlice) => categoriesSlice.categories\n);\n\nexport const selectCategoriesMap = createSelector(\n  [selectCategories],\n  (categories) =>\n    categories.reduce((acc: CategoryMap, category: Category) => {\n      const { title, items } = category;\n      acc[title.toLowerCase()] = items;\n      return acc;\n    }, {} as CategoryMap)\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addItemToCart } from '../../store/cart/cart.action';\nimport { selectCartItems } from '../../store/cart/cart.selector';\n\nimport Button, { BUTTON_TYPE_CLASSES } from '../button/button.component';\n\nimport './product-card.styles.scss';\n\nconst ProductCard = ({ product }) => {\n  const { name, price, imageUrl } = product;\n  const dispatch = useDispatch();\n  const cartItems = useSelector(selectCartItems);\n\n  const addProductToCart = () => dispatch(addItemToCart(cartItems, product));\n\n  return (\n    <div className=\"product-card-container\">\n      <img src={imageUrl} alt={`${name}`} />\n      <div className=\"footer\">\n        <span className=\"name\">{name}</span>\n        <span className=\"price\">{price}</span>\n      </div>\n      <Button\n        buttonType={BUTTON_TYPE_CLASSES.inverted}\n        onClick={addProductToCart}\n      >\n        Add to card\n      </Button>\n    </div>\n  );\n};\n\nexport default ProductCard;\n","import { Link } from 'react-router-dom';\n\nimport ProductCard from '../product-card/product-card.component';\n\nimport './category-preview.styles.scss';\n\nconst CategoryPreview = ({ title, products }) => {\n  return (\n    <div className=\"category-preview-container\">\n      <h2>\n        <Link className=\"title\" to={title}>{title.toUpperCase()}</Link>\n      </h2>\n      <div className=\"preview\">\n        {products\n          .filter((_, index) => index < 4)\n          .map((product) => (\n            <ProductCard key={product.id} product={product} />\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default CategoryPreview;\n","import { useSelector } from 'react-redux';\nimport { selectCategoriesMap } from '../../store/categories/category.selector';\nimport CategoryPreview from '../../components/category-preview/category-preview.component';\n\nconst CategoriesPreview = () => {\n  const categoriesMap = useSelector(selectCategoriesMap);\n\n  return (\n    <>\n      {Object.keys(categoriesMap).map((title) => {\n        const products = categoriesMap[title];\n        return (\n          <CategoryPreview key={title} title={title} products={products} />\n        );\n      })}\n    </>\n  );\n};\n\nexport default CategoriesPreview;\n","import { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { selectCategoriesMap } from '../../store/categories/category.selector';\n\nimport ProductCard from '../../components/product-card/product-card.component';\n\nimport './category.styles.scss';\n\nconst Category = () => {\n  const { category } = useParams();\n  const categoriesMap = useSelector(selectCategoriesMap);\n  const [products, setProducts] = useState(categoriesMap[category]);\n \n  useEffect(() => {\n    setProducts(categoriesMap[category]);\n  }, [category, categoriesMap]);\n\n  return (\n    <>\n      <h2 className=\"category-title\">{category.toUpperCase()}</h2>\n      <div className=\"category-container\">\n        {products &&\n          products.map((product) => (\n            <ProductCard key={product.id} product={product} />\n          ))}\n      </div>\n    </>\n  );\n};\n\nexport default Category;\n","import { useEffect } from 'react';\nimport { Routes, Route } from 'react-router';\nimport { useDispatch } from 'react-redux';\nimport { getCategoriesAndDocuments } from '../../utils/firebase/firebase.utils';\nimport { setCategories } from '../../store/categories/category.action';\n\nimport CategoriesPreview from '../categories-preview/categories-preview.component';\nimport Category from '../category/category.component';\n\nimport './shop.styles.scss';\n\nconst Shop = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const getCategoriesMap = async () => {\n      const categoriesArray = await getCategoriesAndDocuments();\n      dispatch(setCategories(categoriesArray));\n    };\n\n    getCategoriesMap();\n  }, []);\n\n  return (\n    <Routes>\n      <Route index element={<CategoriesPreview />} />\n      <Route path=\":category\" element={<Category />} />\n    </Routes>\n  );\n};\n\nexport default Shop;\n","import { CATEGORIES_ACTION_TYPES, Category } from './category.types';\nimport {\n  createAction,\n  ActionWithPayload,\n} from '../../utils/reducer/reducer.utils';\n\nexport type CategoryAction = ActionWithPayload<\n  CATEGORIES_ACTION_TYPES.SET_CATEGORIES,\n  Category[]\n>;\n\nexport const setCategories = (categories: Category[]): CategoryAction =>\n  createAction(CATEGORIES_ACTION_TYPES.SET_CATEGORIES, categories);\n","import { CategoryItem } from '../categories/category.types';\nimport { CART_ACTION_TYPES, CartItem } from './cart.types';\nimport {\n  createAction,\n  ActionWithPayload,\n} from '../../utils/reducer/reducer.utils';\n\nconst addCartItem = (\n  cartItems: CartItem[],\n  productToAdd: CategoryItem\n): CartItem[] => {\n  const existingCartItem = cartItems.find(\n    (cartItem) => cartItem.id === productToAdd.id\n  );\n\n  if (existingCartItem) {\n    return cartItems.map((cartItem) =>\n      cartItem.id === productToAdd.id\n        ? { ...cartItem, quantity: cartItem.quantity + 1 }\n        : cartItem\n    );\n  }\n\n  return [...cartItems, { ...productToAdd, quantity: 1 }];\n};\n\nconst removeCartItem = (\n  cartItems: CartItem[],\n  cartItemToRemove: CartItem\n): CartItem[] => {\n  // find the cart item to remove\n  const existingCartItem = cartItems.find(\n    (cartItem) => cartItem.id === cartItemToRemove.id\n  );\n\n  // check if quantity is equal to 1, if it is remove that item from the cart\n  if (existingCartItem?.quantity === 1) {\n    return cartItems.filter((cartItem) => cartItem.id !== cartItemToRemove.id);\n  }\n\n  // return back cartitems with matching cart item with reduced quantity\n  return cartItems.map((cartItem) =>\n    cartItem.id === cartItemToRemove.id\n      ? { ...cartItem, quantity: cartItem.quantity - 1 }\n      : cartItem\n  );\n};\n\nconst clearCartItem = (\n  cartItems: CartItem[],\n  cartItemToClear: CartItem\n): CartItem[] =>\n  cartItems.filter((cartItem) => cartItem.id !== cartItemToClear.id);\n\nexport type SetIsCartOpen = ActionWithPayload<\n  CART_ACTION_TYPES.SET_IS_CART_OPEN,\n  boolean\n>;\nexport type SetCartItems = ActionWithPayload<\n  CART_ACTION_TYPES.SET_CART_ITEMS,\n  CartItem[]\n>;\n\nexport const addItemToCart = (\n  cartItems: CartItem[],\n  productToAdd: CategoryItem\n) => {\n  const newCartItems = addCartItem(cartItems, productToAdd);\n\n  return createAction(CART_ACTION_TYPES.SET_CART_ITEMS, newCartItems);\n};\n\nexport const removeItemFromCart = (\n  cartItems: CartItem[],\n  cartItemToRemove: CartItem\n) => {\n  const newCartItems = removeCartItem(cartItems, cartItemToRemove);\n\n  return createAction(CART_ACTION_TYPES.SET_CART_ITEMS, newCartItems);\n};\n\nexport const clearItemFromCart = (\n  cartItems: CartItem[],\n  cartItemToClear: CartItem\n) => {\n  const newCartItems = clearCartItem(cartItems, cartItemToClear);\n\n  return createAction(CART_ACTION_TYPES.SET_CART_ITEMS, newCartItems);\n};\n\nexport const setIsCartOpen = (boolean: boolean): SetIsCartOpen =>\n  createAction(CART_ACTION_TYPES.SET_IS_CART_OPEN, boolean);\n","import { createSelector } from 'reselect';\nimport { CartState } from './cart.reducer';\nimport { RootState } from '../store';\n\nconst selectCartReducer = (state: RootState): CartState => state.cart;\n\nexport const selectIsCartOpen = createSelector(\n  [selectCartReducer],\n  (cart) => cart.isCartOpen\n);\n\nexport const selectCartItems = createSelector(\n  [selectCartReducer],\n  (cart) => cart.cartItems\n);\n\nexport const selectCartTotal = createSelector([selectCartItems], (cartItems) =>\n  cartItems.reduce(\n    (total, cartItem) => total + cartItem.quantity * cartItem.price,\n    0\n  )\n);\n\nexport const selectCartCount = createSelector([selectCartItems], (cartItems) =>\n  cartItems.reduce((total, cartItem) => total + cartItem.quantity, 0)\n);\n"],"names":["BUTTON_TYPE_CLASSES","_ref","children","buttonType","otherProps","CustomButton","arguments","length","undefined","base","BaseButton","google","GoogleSignInButton","inverted","InvertedButton","getButton","_jsx","styled","button","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","selectCategories","createSelector","state","categories","categoriesSlice","selectCategoriesMap","reduce","acc","category","title","items","toLowerCase","product","name","price","imageUrl","dispatch","useDispatch","cartItems","useSelector","selectCartItems","_jsxs","className","src","alt","concat","Button","onClick","addProductToCart","addItemToCart","products","Link","to","toUpperCase","filter","_","index","map","ProductCard","id","CategoriesPreview","categoriesMap","_Fragment","Object","keys","CategoryPreview","Category","useParams","setProducts","useState","useEffect","Shop","async","categoriesArray","getCategoriesAndDocuments","createAction","CATEGORIES_ACTION_TYPES","SET_CATEGORIES","getCategoriesMap","Routes","Route","element","path","productToAdd","newCartItems","addCartItem","find","cartItem","quantity","CART_ACTION_TYPES","SET_CART_ITEMS","removeItemFromCart","cartItemToRemove","removeCartItem","existingCartItem","clearItemFromCart","cartItemToClear","clearCartItem","setIsCartOpen","boolean","SET_IS_CART_OPEN","selectCartReducer","cart","selectIsCartOpen","isCartOpen","selectCartTotal","total","selectCartCount"],"sourceRoot":""}